upstream    lucee_servers {
    ip_hash;
    server          lucee:8080;
    keepalive       32;
}


server {

    set             $lucee_servers "lucee_servers";

    ### allow only known domain names and IP addresses which are required for ELB healthcheck
    ##
    # server_name   my-domain-name.com
    #               *.elb.amazonaws.com
    #               *.ec2.internal
    #               "~^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"
    #               *.compute-1.amazonaws.com
    #               ;


    root            /srv/www/app/webroot;


    ### redirect http to https for my-domain-name.com
    ##
    # set $check_redir_https        "";
    #
    # if ($host = "my-domain-name.com") {
    #     set $check_redir_https    "host";
    # }
    # if ($real_scheme = "http") {
    #     set $check_redir_https    "${check_redir_https}http";
    # }
    # if ($check_redir_https = "hosthttp") {
    #     return 301 https://$host$request_uri;
    # }

    # include         blocked/*.conf;


    listen                      80;


    ### allow larger body size if needed to avoid 413 Request Entity Too Large
    ##
    # client_max_body_size        10m;


    location / {

        ### enable directory listings if needed
        ##
        autoindex     on;


        add_header      X-Request-Id  $request_id     always;
        add_header      X-Remote-Addr $remote_addr    always;   ## Ensure we use the right address for DDoS mitigation; can't log $binary_remote_addr

        try_files       $uri $uri/ @rewrite-rules;

        include         security.conf;


        ### lucee exact match of homepage for efficient DDoS mitigation
        ##
        # location = / {

        #     add_header  X-Request-Id  $request_id always;
        #     add_header  X-Zone-Id     10          always;        # for troubleshooting

        #     limit_conn  ddos_cons 8;
        #     limit_req   zone=ddos_reqs_strict burst=3;

        #     include     proxy-pass-lucee.conf;
        # }

        ### lucee DDoS mitigation regex match for case insensitive checks, gibberish suffix, etc.
        ##
        # location ~* ^(/login)/$ {

        #     add_header  X-Request-Id  $request_id always;
        #     add_header  X-Zone-Id     20          always;

        #     limit_conn  ddos_cons 8;
        #     limit_req   zone=ddos_reqs_strict burst=3;

        #     include     proxy-pass-lucee.conf;
        # }


        ## lucee admin begin
        location ~* /lucee/(admin|doc)/ {

            add_header  X-Request-Id    $request_id always;
            add_header  X-Zone-Id       80          always;

            ## allow local IPs and deny all others
            allow       ::1;
            allow       127.0.0.1;

            deny        all;

            limit_conn  ddos_cons 8;
            limit_req   zone=ddos_reqs_strict;

            include     proxy-pass-lucee.conf;
        }


        ## lucee *.cfm requests
        location ~* \.(cfm|cfc|cfs)$ {

            add_header  X-Request-Id    $request_id always;
            add_header  X-Zone-Id       90          always;

            ## DDoS mitigation - limit requests per second from a single IP 
            limit_req   zone=ddos_reqs burst=8 nodelay;

            include     proxy-pass-lucee.conf;
        }
    }


    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|eot|ttf|otf|woff|woff2)$ {

        ### enable custom 404 image if needed
        ##
        # error_page      404  /_error/404.png;

        expires         14d;
        access_log      off;
    }


    location @rewrite-rules {

        include     rewrite-rules.conf;
    }


    ### serve /s3/public from S3 bucket s3-bucket-name
    ###     e.g.                            /s3/public/large-file.xml.gz
    ### https://s3-bucket-name.s3.amazonaws.com/public/large-file.xml.gz
    ##
    # location /s3/public {
    #     proxy_pass https://s3-bucket-name.s3.amazonaws.com/public;
    # }


    ### custom-404.html and custom-50x.html were added to www/app/config/nginx/html

    error_page  404             /custom-404.html;       ## the location should have a leading /
    location = /custom-404.html {
        # root      /srv/www/app/webroot/_error;        ## if we want to keep the custom errors with the app
        root        /etc/nginx/html;

        add_header  X-Request-Id        $request_id always;

        ## replace substrings in error template
        sub_filter  "{{status}}"        $status;
        sub_filter  "{{time_iso8601}}"  $time_iso8601;
        sub_filter  "{{request_id}}"    $request_id;
        sub_filter  "{{request_uri}}"   $request_uri;
        sub_filter  "{{host}}"          $host;
        sub_filter  "{{remote_addr}}"   $remote_addr;

        internal;
    }

    error_page 500 502 503 504  /custom-50x.html;       ## the location should have a leading /
    location = /custom-50x.html {
        # root      /srv/www/app/webroot/_error;        ## if we want to keep the custom errors with the app
        root        /etc/nginx/html;

        add_header  X-Request-Id        $request_id always;

        ## replace substrings in error template
        sub_filter  "{{status}}"        $status;
        sub_filter  "{{time_iso8601}}"  $time_iso8601;
        sub_filter  "{{request_id}}"    $request_id;
        sub_filter  "{{request_uri}}"   $request_uri;
        sub_filter  "{{host}}"          $host;
        sub_filter  "{{remote_addr}}"   $remote_addr;

        internal;
    }


    ### this URI can be enabled to test the custom-50x.html page
    ##
    # location = /test50x {
    #     fastcgi_pass unix:/does/not/exist;
    # }
}


### redirect www.my-domain-name.com to my-domain-name.com
##
# server {
#     server_name     www.my-domain-name.com;
#     listen          80;
##    listen          443;
#     return          301 https://my-domain-name.com$request_uri;
# }


## redirect http to https
#server {
#    server_name    my-domain-name.com
#                    *.my-domain-name.com;
#    listen         80;
#    return         301 https://$server_name$request_uri;
#}
